package erp.crmmodule.services;

import erp.commonmodule.exception.BusinessException;
import erp.crmmodule.dao.BonusDao;
import erp.crmmodule.dao.BonusTransactionDao;
import erp.crmmodule.dao.CustomerDao;
import erp.crmmodule.dto.BonusRequestDto;
import erp.crmmodule.dto.BonusTransactionDto;
import erp.crmmodule.dto.CustomerDto;
import erp.crmmodule.mapper.BonusTransactionMapper;
import erp.crmmodule.mapper.CustomerMapper;
import erp.crmmodule.models.BonusEntity;
import erp.crmmodule.models.BonusTransactionEntity;
import erp.crmmodule.models.CustomerEntity;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.List;

@Service
@RequiredArgsConstructor
public class CustomerServiceImpl implements CustomerService {

    private final CustomerDao customerRepository;
    private final BonusDao bonusRepository;
    private final BonusTransactionDao bonusTransactionRepository;
    private final CustomerMapper customerMapper;
    private final BonusTransactionMapper bonusTransactionMapper;

    /**
     * Yeni m√º≈üteri olu≈üturma
     * - Dok√ºmanda: "POST /api/customers"
     * - Email benzersiz olmalƒ±.
     */
    @Override
    public CustomerDto createCustomer(CustomerDto customerDto) {
        if (customerRepository.existsByEmail(customerDto.getEmail())) {
            throw new BusinessException(1001, "Email zaten kayƒ±tlƒ±");
        }
        CustomerEntity entity = customerMapper.toEntity(customerDto);
        entity.setBonus(BigDecimal.ZERO); // ba≈ülangƒ±√ß bonusu sƒ±fƒ±r
        CustomerEntity saved = customerRepository.save(entity);
        return customerMapper.toDto(saved);
    }

    /**
     * M√º≈üteri listesini getirir
     * - Dok√ºmanda: "GET /api/customers"
     * - minBonus / maxBonus filtreleri opsiyonel olacak.
     */
    @Override
    public List<CustomerDto> listCustomers(BigDecimal minBonus, BigDecimal maxBonus) {
        if (minBonus != null && maxBonus != null) {
            return customerMapper.toDtoList(customerRepository.findByBonusBetween(minBonus, maxBonus));
        }
        return customerMapper.toDtoList(customerRepository.findAll());
    }



//    @Override
//    public List<CustomerDto> listCustomers(BigDecimal minBonus, BigDecimal maxBonus){
//
//        // Specification<CustomerEntity> objesi olu≈üturulur.
//        Specification<CustomerEntity> spec = (root, query, cb) -> {
//            List<Predicate> predicates = new ArrayList<>();
//
//            // 1. Minimum Bonus Filtresi (minBonus parametresi varsa uygulanƒ±r)
//            if (minBonus != null) {
//                // CustomerEntity'deki "bonusBalance" alanƒ±nƒ±n, minBonus deƒüerinden B√úY√úK veya E≈ûƒ∞T olmasƒ±nƒ± ≈üart ko≈üar (>=)
//                predicates.add(cb.greaterThanOrEqualTo(root.get("bonusBalance"), minBonus));
//            }
//
//            // 2. Maksimum Bonus Filtresi (maxBonus parametresi varsa uygulanƒ±r)
//            if (maxBonus != null) {
//                // CustomerEntity'deki "bonusBalance" alanƒ±nƒ±n, maxBonus deƒüerinden K√ú√á√úK veya E≈ûƒ∞T olmasƒ±nƒ± ≈üart ko≈üar (<=)
//                predicates.add(cb.lessThanOrEqualTo(root.get("bonusBalance"), maxBonus));
//            }
//
//            // Olu≈üturulan t√ºm ≈üartlarƒ± (Predicate) mantƒ±ksal AND ile birle≈ütirir.
//            // Eƒüer Predicates listesi bo≈üsa, cb.and() t√ºm kayƒ±tlarƒ± d√∂nd√ºr√ºr.
//            return cb.and(predicates.toArray(new Predicate[0]));
//        };
//
//        // Repository'deki findAll(Specification) metodu √ßaƒürƒ±lƒ±r.
//        List<CustomerEntity> customers = customerRepository.findAll(spec);
//
//        // Sonucu DTO listesine d√∂n√º≈üt√ºrerek d√∂nd√ºr.
//        return customerMapper.toDtoList(customers);
//    }




    /**
     * M√º≈üteriye bonus ekler
     * - Dok√ºmanda: "POST /api/customers/{id}/bonus"
     * - Bonus tablosuna kayƒ±t a√ßƒ±lƒ±r
     * - Customer bonus g√ºncellenir
     * - BonusTransaction kaydƒ± olu≈üturulur
     * - Negatif veya sƒ±fƒ±r bonus kabul edilmez (dok√ºman gereƒüi)
     */
    @Override
    @Transactional
    public CustomerDto addBonus(Long customerId, BonusRequestDto request) {
        // 1Ô∏è‚É£ M√º≈üteri kontrol√º
        CustomerEntity customer = customerRepository.findById(customerId)
                .orElseThrow(() -> new BusinessException(1002, "M√º≈üteri bulunamadƒ±"));

        // 2Ô∏è‚É£ Negatif veya sƒ±fƒ±r bonus kontrol√º
        if (request.getAmount() == null || request.getAmount().compareTo(BigDecimal.ZERO) <= 0) {
            throw new BusinessException(1004, "Negatif veya sƒ±fƒ±r bonus eklenemez");
        }

        // 3Ô∏è‚É£ Bonus kaydƒ± olu≈ütur (Bonus tablosuna)
        BonusEntity bonus = new BonusEntity();
        bonus.setCustomer(customer);
        bonus.setAmount(request.getAmount());
        bonus.setDescription(request.getDescription());
        bonusRepository.save(bonus);

        // 4Ô∏è‚É£ Customer bonus bakiyesini g√ºncelle
        BigDecimal updatedBalance = customer.getBonus().add(request.getAmount());

        // üí° (Ek g√ºvenlik) Negatif bonus olu≈ümamasƒ± i√ßin koruma
        if (updatedBalance.compareTo(BigDecimal.ZERO) < 0) {
            throw new BusinessException(1005, "Bonus bakiyesi sƒ±fƒ±rƒ±n altƒ±na d√º≈üemez");
        }

        customer.setBonus(updatedBalance);
        customerRepository.save(customer);

        // 5Ô∏è‚É£ BonusTransaction kaydƒ± olu≈ütur (audit log)
        BonusTransactionEntity tx = new BonusTransactionEntity();
        tx.setCustomer(customer);
        tx.setAmount(request.getAmount());
        tx.setDescription("Bonus eklendi: " + request.getDescription());
        bonusTransactionRepository.save(tx);

        // 6Ô∏è‚É£ DTO d√∂n
        return customerMapper.toDto(customer);
    }

    /**
     * M√º≈üteriye ait bonus transaction listesini getirir
     * - Dok√ºmanda: "GET /api/customers/{id}/bonus-transactions"
     */
    @Override
    public List<BonusTransactionDto> listBonusTransactions(Long customerId) {
        if (!customerRepository.existsById(customerId)) {
            throw new BusinessException(1003, "M√º≈üteri bulunamadƒ±");
        }
        return bonusTransactionMapper.toDtoList(
                bonusTransactionRepository.findByCustomer_IdOrderByCreatedAtDesc(customerId)
        );
    }
}
